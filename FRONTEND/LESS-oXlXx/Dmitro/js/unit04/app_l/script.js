// промисы это древняя штука для запросов
// что бы создать промис нужно написать new Promise()

// resolve - промис вiдпрацював правильно
// reject - вiдпрацювало неправильно

const promis = () => { // Определяется функция promis(), которая возвращает объект Promise.

// Внутри функции promis() создается новый Promise с помощью конструктора
// new Promise((resolve, reject) => {...}). Этот Promise выполняет асинхронный
// запрос к URL https://reqres.in/api/users?page=2 с использованием функции fetch().

 return new Promise((resolve, rejected) => {
    const url = 'https://reqres.in/api/users?page=2';
    // const url = 'https://reqres.in/api/usernammm/e?'; // error

    fetch(url)  // fetch взять

// Внутри блока then() обрабатывается результат запроса.
// Если ответ от сервера не содержит ошибок (код ответа в диапазоне 200-299),
// вызывается метод .json() для преобразования тела ответа в объект JavaScript.
    .then((response) => {

        if(!response.ok) {
            console.log('error');
            throw new Error('Интернет ответ отьебнул, иди разберайся')
        } else {
            return response.json()
        }
    })
    .then((data) => {
        console.log(data);
    })
    // Внутри следующего блока then() обрабатывается результат вызова .json()
    // Здесь выводится содержимое тела ответа сервера в виде объекта в
    // консоль с помощью console.log().

    .catch((error) => {
        console.error('Тут проблемка с fetch намечается', error);
    })

    // Если запрос завершился с ошибкой, блок catch()
    // перехватывает эту ошибку и обрабатывает ее.
 });
}
promis()

'https://basa404.on.fox/films/terminator?path=2&id=3'
// написать в чат гпт какие параметры принимает url
//   / - pass params это папочки
//   ? - search params
//  https://reqres.in/api
// catch додати вкiнцi законсолити еррор
// скопирую функцию в чат джипи и спросить как она работает


// URL (Uniform Resource Locator)
// Протокол: Обозначает протокол, используемый для доступа к ресурсу,
// такой как http://, https://, ftp:// и т.д.

// Имя хоста (доменное имя): Указывает на сервер, на котором расположен ресурс.

// Порт (необязательно): Указывает на порт сервера, через который
// осуществляется доступ к ресурсу. По умолчанию для HTTP это 80, для HTTPS — 443.

// Путь к ресурсу: Указывает на конкретный путь или файл на сервере,
// к которому требуется обратиться.

// Параметры запроса (необязательно):
// Содержат дополнительную информацию, передаваемую на сервер в
// виде пар "ключ=значение", обычно после вопросительного знака ?
// и содержит пары ключ-значение, разделенные символом &

// q=javascript&page=2

// Фрагмент (якорь, необязательно): Указывает на конкретное место
// внутри документа, к которому нужно прокрутить страницу,
// обычно после символа решетки #


// Каждая пара ключ=значение представляет собой параметр запроса.
// В вашем вопросе, символ / обычно используется для разделения различных
// сегментов URL (например, пути и параметров), но сам по себе он не является
// частью параметров запроса.
